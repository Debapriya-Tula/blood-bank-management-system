"""
Django settings for bbms project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Channels
ASGI_APPLICATION = 'bbms.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9ey-72*=%bwrh#ids$(8vk#fc0sj7pw(z75icr83)vz7k06dgk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

SOCIAL_AUTH_FACEBOOK_KEY = '2022256484500807'  # App ID
SOCIAL_AUTH_FACEBOOK_SECRET = '260364be347063b8a129b15b8dc65f80'  # App Secret

INSTALLED_APPS = [
	'channels',
    'chat',
	'accounts',
	'allauth',
	'allauth.account',
	'allauth.socialaccount',
	'allauth.socialaccount.providers.facebook',
#	'allauth.socialaccount.providers.windowslive',
#	'allauth.socialaccount.providers.google',
	'django.contrib.sites',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django_extensions',
	'social_django',
	'rest_framework',
	'InventoryManagement',
	'hospital_portal',
	'donor_portal',
	'patient_portal',
	'stripe',	
	'payments',
	'celery',
	'celerybeat_status',
	'donorapi',
	'django_server_access_logs',
	'rest_framework.authtoken',
#	'django.contrib.sites.models.Site',
#	'microsoft_auth',
#	'django.contrib.staticfiles',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'social_django.middleware.SocialAuthExceptionMiddleware',
	'django_server_access_logs.logging_middleware.AccessLogsMiddleware',
]

ROOT_URLCONF = 'bbms.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [
			'templates/',
		],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'social_django.context_processors.backends',
				'social_django.context_processors.login_redirect',
#				'microsoft_auth.context_processors.microsoft',
			],
		},
	},
]

"""REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework.authentication.SessionAuthentication',
	)
}
"""
WSGI_APPLICATION = 'bbms.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}
"""DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.mysql',
		'NAME': 'bbms',
		'USER': 'root',
		'PASSWORD': '6461',
		'HOST': 'localhost',
		'PORT': '',
	}
}"""

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

AUTHENTICATION_BACKENDS = (
	'social_core.backends.twitter.TwitterOAuth',
	'social_core.backends.facebook.FacebookOAuth2',
#	'microsoft_auth.backends.MicrosoftAuthenticationBackend',
	'django.contrib.auth.backends.ModelBackend',
#	'azure_ad_auth.backends.AzureActiveDirectoryBackend',
	'allauth.account.auth_backends.AuthenticationBackend',
)

MICROSOFT_AUTH_LOGIN_TYPE = 'ma'

MICROSOFT_AUTH_CLIENT_ID = '2578ad2f-27b9-4d24-86cf-e697ea76f561'
MICROSOFT_AUTH_CLIENT_SECRET = 'lsdJTR22^(yxeqYSJS532**'

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


if DEBUG:
    # test keys
    STRIPE_PUBLISHABLE_KEY = 'pk_test_VTVXKFq9QD0ifGJWU30zd4Kk'
    STRIPE_SECRET_KEY = 'sk_test_CHRCbOz7UP4daIUEM5qK2ule'
    BT_ENVIRONMENT='sandbox'
    BT_MERCHANT_ID=''
    BT_PUBLIC_KEY=''
    BT_PRIVATE_KEY=''
else:
    # live keys
    STRIPE_PUBLISHABLE_KEY = 'YOUR STRIPE LIVE PUB KEY'
    STRIPE_SECRET_KEY = 'YOUR STRIPE LIVE SECRET KEY'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)


MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = '/'

SOCIAL_AUTH_FACEBOOK_SCOPE = [
	'email',
	'user_gender',
	'user_birthday',
	'default',
	'user_hometown',
]

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile', 'user_friends', 'user_birthday', 'user_gender', 'user_hometown'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v2.12',
    }
}

SESSION_EXPIRE_AT_BROWSER_CLOSE = False

from celery.schedules import crontab

CELERY_BROKER_URL = 'redis://localhost:6379'
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Dili'
CELERY_BEAT_SCHEDULE =  {'task-number-one': {
                            'task': 'InventoryManagement.tasks.removeExpired',
                            'schedule': 86400.0,
                            'args': ('Nothing'),
                            },
                            'task-number-two': {
                            'task': 'InventoryManagement.tasks.thaw_blood',
                            'schedule': 86400.0,
                            'args':('Nothing')
                            }
                        }